#!/usr/bin/env python3

import sys
import os
import sqlite3
from datetime import date
from urllib.parse import quote_plus
from urllib.request import Request, urlopen

DB_PATH = 'playlists.db'

def get_db_connection():
    conn = sqlite3.connect(DB_PATH)
    conn.row_factory = sqlite3.Row
    return conn

def get_youtube_url(query):
    url = f"https://www.youtube.com/results?search_query={quote_plus(query)}"
    req = Request(url, headers={'User-Agent': 'Mozilla/5.0'})
    response = urlopen(req).read().decode('utf-8')
    
    start_index = response.find('/watch?v=')
    if start_index != -1:
        end_index = response.find('"', start_index)
        video_id = response[start_index:end_index]
        return f"https://www.youtube.com{video_id}"
    return ""

def create_playlist_if_not_exists(conn, playlist_name):
    cursor = conn.cursor()
    cursor.execute("INSERT OR IGNORE INTO playlists (title) VALUES (?)", (playlist_name,))
    conn.commit()
    return cursor.lastrowid or cursor.execute("SELECT id FROM playlists WHERE title = ?", (playlist_name,)).fetchone()[0]

def save_track(artist, title, playlist):
    conn = get_db_connection()
    youtube_url = get_youtube_url(f"{artist} - {title}")
    today = date.today().isoformat()
    
    try:
        cursor = conn.cursor()
        
        # Insert track
        cursor.execute("""
            INSERT INTO tracks (date, artist, title, url)
            VALUES (?, ?, ?, ?)
        """, (today, artist, title, youtube_url))
        track_id = cursor.lastrowid
        
        # Get or create playlist
        playlist_id = create_playlist_if_not_exists(conn, playlist)
        
        # Associate track with playlist
        cursor.execute("""
            INSERT INTO playlist_tracks (playlist_id, track_id)
            VALUES (?, ?)
        """, (playlist_id, track_id))
        
        conn.commit()
        print(f"Track saved to playlist '{playlist}'")
    except sqlite3.Error as e:
        print(f"An error occurred: {e}")
    finally:
        conn.close()

def list_playlists():
    conn = get_db_connection()
    try:
        cursor = conn.cursor()
        cursor.execute("SELECT title FROM playlists")
        playlists = cursor.fetchall()
        
        if not playlists:
            print("No playlists found.")
        else:
            print("Available playlists:")
            for playlist in playlists:
                print(f"- {playlist['title']}")
    except sqlite3.Error as e:
        print(f"An error occurred: {e}")
    finally:
        conn.close()

def cat_playlist(playlist):
    conn = get_db_connection()
    try:
        cursor = conn.cursor()
        cursor.execute("""
            SELECT t.date, t.artist, t.title, t.url
            FROM tracks t
            JOIN playlist_tracks pt ON t.id = pt.track_id
            JOIN playlists p ON p.id = pt.playlist_id
            WHERE p.title = ?
        """, (playlist,))
        tracks = cursor.fetchall()
        
        if not tracks:
            print(f"Playlist '{playlist}' not found or is empty.")
        else:
            print(f"Contents of '{playlist}' playlist:\n")
            for track in tracks:
                print(f"{track['date']}, {track['artist']} - {track['title']}\nURL: {track['url']}\n")
    except sqlite3.Error as e:
        print(f"An error occurred: {e}")
    finally:
        conn.close()

def print_usage():
    print("Usage:")
    print("  To list playlists: python savetrack.py ls")
    print("  To save a track: python savetrack.py <artist> <track_title> <playlist_name>")
    print("  To print playlist contents: python savetrack.py cat <playlist_name>")

def main():
    if len(sys.argv) == 2 and sys.argv[1] == "ls":
        list_playlists()
    elif len(sys.argv) == 3 and sys.argv[1] == "cat":
        cat_playlist(sys.argv[2])
    elif len(sys.argv) == 4:
        artist, title, playlist = sys.argv[1], sys.argv[2], sys.argv[3]
        save_track(artist, title, playlist)
    else:
        print_usage()
        sys.exit(1)

if __name__ == "__main__":
    try:
        main()
    except Exception as e:
        print(f"An unexpected error occurred: {e}")
        sys.exit(1)
